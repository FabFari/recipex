/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-04-08 17:16:44 UTC)
 * on 2016-04-26 at 17:01:19 UTC 
 * Modify at your own risk.
 */

package com.appspot.recipex_1281.recipexServerApi;

/**
 * Service definition for RecipexServerApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link RecipexServerApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class RecipexServerApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the recipexServerApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://recipex-1281.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "recipexServerApi/v1/recipexServerApi/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public RecipexServerApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  RecipexServerApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Hello collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code RecipexServerApi recipexServerApi = new RecipexServerApi(...);}
   *   {@code RecipexServerApi.Hello.List request = recipexServerApi.hello().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Hello hello() {
    return new Hello();
  }

  /**
   * The "hello" collection of methods.
   */
  public class Hello {

    /**
     * Create a request for the method "hello.helloWorld".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link HelloWorld#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public HelloWorld helloWorld() throws java.io.IOException {
      HelloWorld result = new HelloWorld();
      initialize(result);
      return result;
    }

    public class HelloWorld extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "hello";

      /**
       * Create a request for the method "hello.helloWorld".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link HelloWorld#execute()} method to invoke the remote
       * operation. <p> {@link
       * HelloWorld#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected HelloWorld() {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public HelloWorld setAlt(java.lang.String alt) {
        return (HelloWorld) super.setAlt(alt);
      }

      @Override
      public HelloWorld setFields(java.lang.String fields) {
        return (HelloWorld) super.setFields(fields);
      }

      @Override
      public HelloWorld setKey(java.lang.String key) {
        return (HelloWorld) super.setKey(key);
      }

      @Override
      public HelloWorld setOauthToken(java.lang.String oauthToken) {
        return (HelloWorld) super.setOauthToken(oauthToken);
      }

      @Override
      public HelloWorld setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (HelloWorld) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public HelloWorld setQuotaUser(java.lang.String quotaUser) {
        return (HelloWorld) super.setQuotaUser(quotaUser);
      }

      @Override
      public HelloWorld setUserIp(java.lang.String userIp) {
        return (HelloWorld) super.setUserIp(userIp);
      }

      @Override
      public HelloWorld set(String parameterName, Object value) {
        return (HelloWorld) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Measurement collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code RecipexServerApi recipexServerApi = new RecipexServerApi(...);}
   *   {@code RecipexServerApi.Measurement.List request = recipexServerApi.measurement().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Measurement measurement() {
    return new Measurement();
  }

  /**
   * The "measurement" collection of methods.
   */
  public class Measurement {

    /**
     * Create a request for the method "measurement.addMeasurement".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link AddMeasurement#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainAddMeasurementMessage}
     * @return the request
     */
    public AddMeasurement addMeasurement(java.lang.Long userId, com.appspot.recipex_1281.recipexServerApi.model.MainAddMeasurementMessage content) throws java.io.IOException {
      AddMeasurement result = new AddMeasurement(userId, content);
      initialize(result);
      return result;
    }

    public class AddMeasurement extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/measurements";

      /**
       * Create a request for the method "measurement.addMeasurement".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link AddMeasurement#execute()} method to invoke the remote
       * operation. <p> {@link AddMeasurement#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param userId
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainAddMeasurementMessage}
       * @since 1.13
       */
      protected AddMeasurement(java.lang.Long userId, com.appspot.recipex_1281.recipexServerApi.model.MainAddMeasurementMessage content) {
        super(RecipexServerApi.this, "POST", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public AddMeasurement setAlt(java.lang.String alt) {
        return (AddMeasurement) super.setAlt(alt);
      }

      @Override
      public AddMeasurement setFields(java.lang.String fields) {
        return (AddMeasurement) super.setFields(fields);
      }

      @Override
      public AddMeasurement setKey(java.lang.String key) {
        return (AddMeasurement) super.setKey(key);
      }

      @Override
      public AddMeasurement setOauthToken(java.lang.String oauthToken) {
        return (AddMeasurement) super.setOauthToken(oauthToken);
      }

      @Override
      public AddMeasurement setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddMeasurement) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddMeasurement setQuotaUser(java.lang.String quotaUser) {
        return (AddMeasurement) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddMeasurement setUserIp(java.lang.String userIp) {
        return (AddMeasurement) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public AddMeasurement setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public AddMeasurement set(String parameterName, Object value) {
        return (AddMeasurement) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "measurement.deleteMeasurement".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link DeleteMeasurement#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @param userId
     * @return the request
     */
    public DeleteMeasurement deleteMeasurement(java.lang.Long id, java.lang.Long userId) throws java.io.IOException {
      DeleteMeasurement result = new DeleteMeasurement(id, userId);
      initialize(result);
      return result;
    }

    public class DeleteMeasurement extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/measurements/{id}";

      /**
       * Create a request for the method "measurement.deleteMeasurement".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link DeleteMeasurement#execute()} method to invoke the remote
       * operation. <p> {@link DeleteMeasurement#initialize(com.google.api.client.googleapis.services.Ab
       * stractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param id
       * @param userId
       * @since 1.13
       */
      protected DeleteMeasurement(java.lang.Long id, java.lang.Long userId) {
        super(RecipexServerApi.this, "DELETE", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public DeleteMeasurement setAlt(java.lang.String alt) {
        return (DeleteMeasurement) super.setAlt(alt);
      }

      @Override
      public DeleteMeasurement setFields(java.lang.String fields) {
        return (DeleteMeasurement) super.setFields(fields);
      }

      @Override
      public DeleteMeasurement setKey(java.lang.String key) {
        return (DeleteMeasurement) super.setKey(key);
      }

      @Override
      public DeleteMeasurement setOauthToken(java.lang.String oauthToken) {
        return (DeleteMeasurement) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteMeasurement setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteMeasurement) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteMeasurement setQuotaUser(java.lang.String quotaUser) {
        return (DeleteMeasurement) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteMeasurement setUserIp(java.lang.String userIp) {
        return (DeleteMeasurement) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public DeleteMeasurement setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public DeleteMeasurement setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public DeleteMeasurement set(String parameterName, Object value) {
        return (DeleteMeasurement) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "measurement.getMeasurement".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetMeasurement#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @param userId
     * @return the request
     */
    public GetMeasurement getMeasurement(java.lang.Long id, java.lang.Long userId) throws java.io.IOException {
      GetMeasurement result = new GetMeasurement(id, userId);
      initialize(result);
      return result;
    }

    public class GetMeasurement extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainMeasurementInfoMessage> {

      private static final String REST_PATH = "users/{user_id}/measurements/{id}";

      /**
       * Create a request for the method "measurement.getMeasurement".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetMeasurement#execute()} method to invoke the remote
       * operation. <p> {@link GetMeasurement#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param id
       * @param userId
       * @since 1.13
       */
      protected GetMeasurement(java.lang.Long id, java.lang.Long userId) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainMeasurementInfoMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetMeasurement setAlt(java.lang.String alt) {
        return (GetMeasurement) super.setAlt(alt);
      }

      @Override
      public GetMeasurement setFields(java.lang.String fields) {
        return (GetMeasurement) super.setFields(fields);
      }

      @Override
      public GetMeasurement setKey(java.lang.String key) {
        return (GetMeasurement) super.setKey(key);
      }

      @Override
      public GetMeasurement setOauthToken(java.lang.String oauthToken) {
        return (GetMeasurement) super.setOauthToken(oauthToken);
      }

      @Override
      public GetMeasurement setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetMeasurement) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetMeasurement setQuotaUser(java.lang.String quotaUser) {
        return (GetMeasurement) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetMeasurement setUserIp(java.lang.String userIp) {
        return (GetMeasurement) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetMeasurement setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetMeasurement setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetMeasurement set(String parameterName, Object value) {
        return (GetMeasurement) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "measurement.updateMeasurement".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link UpdateMeasurement#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @param userId
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainUpdateMeasurementMessage}
     * @return the request
     */
    public UpdateMeasurement updateMeasurement(java.lang.Long id, java.lang.Long userId, com.appspot.recipex_1281.recipexServerApi.model.MainUpdateMeasurementMessage content) throws java.io.IOException {
      UpdateMeasurement result = new UpdateMeasurement(id, userId, content);
      initialize(result);
      return result;
    }

    public class UpdateMeasurement extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/measurements/{id}";

      /**
       * Create a request for the method "measurement.updateMeasurement".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link UpdateMeasurement#execute()} method to invoke the remote
       * operation. <p> {@link UpdateMeasurement#initialize(com.google.api.client.googleapis.services.Ab
       * stractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param id
       * @param userId
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainUpdateMeasurementMessage}
       * @since 1.13
       */
      protected UpdateMeasurement(java.lang.Long id, java.lang.Long userId, com.appspot.recipex_1281.recipexServerApi.model.MainUpdateMeasurementMessage content) {
        super(RecipexServerApi.this, "PUT", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public UpdateMeasurement setAlt(java.lang.String alt) {
        return (UpdateMeasurement) super.setAlt(alt);
      }

      @Override
      public UpdateMeasurement setFields(java.lang.String fields) {
        return (UpdateMeasurement) super.setFields(fields);
      }

      @Override
      public UpdateMeasurement setKey(java.lang.String key) {
        return (UpdateMeasurement) super.setKey(key);
      }

      @Override
      public UpdateMeasurement setOauthToken(java.lang.String oauthToken) {
        return (UpdateMeasurement) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateMeasurement setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateMeasurement) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateMeasurement setQuotaUser(java.lang.String quotaUser) {
        return (UpdateMeasurement) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateMeasurement setUserIp(java.lang.String userIp) {
        return (UpdateMeasurement) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public UpdateMeasurement setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public UpdateMeasurement setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public UpdateMeasurement set(String parameterName, Object value) {
        return (UpdateMeasurement) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Message collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code RecipexServerApi recipexServerApi = new RecipexServerApi(...);}
   *   {@code RecipexServerApi.Message.List request = recipexServerApi.message().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Message message() {
    return new Message();
  }

  /**
   * The "message" collection of methods.
   */
  public class Message {

    /**
     * Create a request for the method "message.deleteMessage".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link DeleteMessage#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param id
     * @return the request
     */
    public DeleteMessage deleteMessage(java.lang.Long userId, java.lang.Long id) throws java.io.IOException {
      DeleteMessage result = new DeleteMessage(userId, id);
      initialize(result);
      return result;
    }

    public class DeleteMessage extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/messages/{id}";

      /**
       * Create a request for the method "message.deleteMessage".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link DeleteMessage#execute()} method to invoke the remote
       * operation. <p> {@link DeleteMessage#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param userId
       * @param id
       * @since 1.13
       */
      protected DeleteMessage(java.lang.Long userId, java.lang.Long id) {
        super(RecipexServerApi.this, "DELETE", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public DeleteMessage setAlt(java.lang.String alt) {
        return (DeleteMessage) super.setAlt(alt);
      }

      @Override
      public DeleteMessage setFields(java.lang.String fields) {
        return (DeleteMessage) super.setFields(fields);
      }

      @Override
      public DeleteMessage setKey(java.lang.String key) {
        return (DeleteMessage) super.setKey(key);
      }

      @Override
      public DeleteMessage setOauthToken(java.lang.String oauthToken) {
        return (DeleteMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteMessage setQuotaUser(java.lang.String quotaUser) {
        return (DeleteMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteMessage setUserIp(java.lang.String userIp) {
        return (DeleteMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public DeleteMessage setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public DeleteMessage setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public DeleteMessage set(String parameterName, Object value) {
        return (DeleteMessage) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "message.getMessage".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetMessage#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param id
     * @return the request
     */
    public GetMessage getMessage(java.lang.Long userId, java.lang.Long id) throws java.io.IOException {
      GetMessage result = new GetMessage(userId, id);
      initialize(result);
      return result;
    }

    public class GetMessage extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainMessageInfoMessage> {

      private static final String REST_PATH = "users/{user_id}/messages/{id}";

      /**
       * Create a request for the method "message.getMessage".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetMessage#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param id
       * @since 1.13
       */
      protected GetMessage(java.lang.Long userId, java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainMessageInfoMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetMessage setAlt(java.lang.String alt) {
        return (GetMessage) super.setAlt(alt);
      }

      @Override
      public GetMessage setFields(java.lang.String fields) {
        return (GetMessage) super.setFields(fields);
      }

      @Override
      public GetMessage setKey(java.lang.String key) {
        return (GetMessage) super.setKey(key);
      }

      @Override
      public GetMessage setOauthToken(java.lang.String oauthToken) {
        return (GetMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public GetMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetMessage setQuotaUser(java.lang.String quotaUser) {
        return (GetMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetMessage setUserIp(java.lang.String userIp) {
        return (GetMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetMessage setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetMessage setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public GetMessage set(String parameterName, Object value) {
        return (GetMessage) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "message.readMessage".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link ReadMessage#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param id
     * @return the request
     */
    public ReadMessage readMessage(java.lang.Long userId, java.lang.Long id) throws java.io.IOException {
      ReadMessage result = new ReadMessage(userId, id);
      initialize(result);
      return result;
    }

    public class ReadMessage extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/messages/{id}";

      /**
       * Create a request for the method "message.readMessage".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link ReadMessage#execute()} method to invoke the remote
       * operation. <p> {@link
       * ReadMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param id
       * @since 1.13
       */
      protected ReadMessage(java.lang.Long userId, java.lang.Long id) {
        super(RecipexServerApi.this, "PUT", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public ReadMessage setAlt(java.lang.String alt) {
        return (ReadMessage) super.setAlt(alt);
      }

      @Override
      public ReadMessage setFields(java.lang.String fields) {
        return (ReadMessage) super.setFields(fields);
      }

      @Override
      public ReadMessage setKey(java.lang.String key) {
        return (ReadMessage) super.setKey(key);
      }

      @Override
      public ReadMessage setOauthToken(java.lang.String oauthToken) {
        return (ReadMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public ReadMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ReadMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ReadMessage setQuotaUser(java.lang.String quotaUser) {
        return (ReadMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public ReadMessage setUserIp(java.lang.String userIp) {
        return (ReadMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public ReadMessage setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public ReadMessage setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public ReadMessage set(String parameterName, Object value) {
        return (ReadMessage) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "message.sendMessage".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
     * operation.
     *
     * @param receiver
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainMessageSendMessage}
     * @return the request
     */
    public SendMessage sendMessage(java.lang.Long receiver, com.appspot.recipex_1281.recipexServerApi.model.MainMessageSendMessage content) throws java.io.IOException {
      SendMessage result = new SendMessage(receiver, content);
      initialize(result);
      return result;
    }

    public class SendMessage extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{receiver}/messages";

      /**
       * Create a request for the method "message.sendMessage".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
       * operation. <p> {@link
       * SendMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param receiver
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainMessageSendMessage}
       * @since 1.13
       */
      protected SendMessage(java.lang.Long receiver, com.appspot.recipex_1281.recipexServerApi.model.MainMessageSendMessage content) {
        super(RecipexServerApi.this, "POST", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.receiver = com.google.api.client.util.Preconditions.checkNotNull(receiver, "Required parameter receiver must be specified.");
      }

      @Override
      public SendMessage setAlt(java.lang.String alt) {
        return (SendMessage) super.setAlt(alt);
      }

      @Override
      public SendMessage setFields(java.lang.String fields) {
        return (SendMessage) super.setFields(fields);
      }

      @Override
      public SendMessage setKey(java.lang.String key) {
        return (SendMessage) super.setKey(key);
      }

      @Override
      public SendMessage setOauthToken(java.lang.String oauthToken) {
        return (SendMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public SendMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendMessage setQuotaUser(java.lang.String quotaUser) {
        return (SendMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendMessage setUserIp(java.lang.String userIp) {
        return (SendMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long receiver;

      /**

       */
      public java.lang.Long getReceiver() {
        return receiver;
      }

      public SendMessage setReceiver(java.lang.Long receiver) {
        this.receiver = receiver;
        return this;
      }

      @Override
      public SendMessage set(String parameterName, Object value) {
        return (SendMessage) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Request collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code RecipexServerApi recipexServerApi = new RecipexServerApi(...);}
   *   {@code RecipexServerApi.Request.List request = recipexServerApi.request().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Request request() {
    return new Request();
  }

  /**
   * The "request" collection of methods.
   */
  public class Request {

    /**
     * Create a request for the method "request.answerRequest".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link AnswerRequest#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param id
     * @param answer
     * @return the request
     */
    public AnswerRequest answerRequest(java.lang.Long userId, java.lang.Long id, java.lang.Boolean answer) throws java.io.IOException {
      AnswerRequest result = new AnswerRequest(userId, id, answer);
      initialize(result);
      return result;
    }

    public class AnswerRequest extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/requests/{id}";

      /**
       * Create a request for the method "request.answerRequest".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link AnswerRequest#execute()} method to invoke the remote
       * operation. <p> {@link AnswerRequest#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param userId
       * @param id
       * @param answer
       * @since 1.13
       */
      protected AnswerRequest(java.lang.Long userId, java.lang.Long id, java.lang.Boolean answer) {
        super(RecipexServerApi.this, "PUT", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.answer = com.google.api.client.util.Preconditions.checkNotNull(answer, "Required parameter answer must be specified.");
      }

      @Override
      public AnswerRequest setAlt(java.lang.String alt) {
        return (AnswerRequest) super.setAlt(alt);
      }

      @Override
      public AnswerRequest setFields(java.lang.String fields) {
        return (AnswerRequest) super.setFields(fields);
      }

      @Override
      public AnswerRequest setKey(java.lang.String key) {
        return (AnswerRequest) super.setKey(key);
      }

      @Override
      public AnswerRequest setOauthToken(java.lang.String oauthToken) {
        return (AnswerRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public AnswerRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AnswerRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AnswerRequest setQuotaUser(java.lang.String quotaUser) {
        return (AnswerRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public AnswerRequest setUserIp(java.lang.String userIp) {
        return (AnswerRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public AnswerRequest setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public AnswerRequest setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean answer;

      /**

       */
      public java.lang.Boolean getAnswer() {
        return answer;
      }

      public AnswerRequest setAnswer(java.lang.Boolean answer) {
        this.answer = answer;
        return this;
      }

      @Override
      public AnswerRequest set(String parameterName, Object value) {
        return (AnswerRequest) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "request.deleteRequest".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link DeleteRequest#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param id
     * @param sender
     * @return the request
     */
    public DeleteRequest deleteRequest(java.lang.Long userId, java.lang.Long id, java.lang.Long sender) throws java.io.IOException {
      DeleteRequest result = new DeleteRequest(userId, id, sender);
      initialize(result);
      return result;
    }

    public class DeleteRequest extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{user_id}/requests/{id}";

      /**
       * Create a request for the method "request.deleteRequest".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link DeleteRequest#execute()} method to invoke the remote
       * operation. <p> {@link DeleteRequest#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param userId
       * @param id
       * @param sender
       * @since 1.13
       */
      protected DeleteRequest(java.lang.Long userId, java.lang.Long id, java.lang.Long sender) {
        super(RecipexServerApi.this, "DELETE", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.sender = com.google.api.client.util.Preconditions.checkNotNull(sender, "Required parameter sender must be specified.");
      }

      @Override
      public DeleteRequest setAlt(java.lang.String alt) {
        return (DeleteRequest) super.setAlt(alt);
      }

      @Override
      public DeleteRequest setFields(java.lang.String fields) {
        return (DeleteRequest) super.setFields(fields);
      }

      @Override
      public DeleteRequest setKey(java.lang.String key) {
        return (DeleteRequest) super.setKey(key);
      }

      @Override
      public DeleteRequest setOauthToken(java.lang.String oauthToken) {
        return (DeleteRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteRequest setQuotaUser(java.lang.String quotaUser) {
        return (DeleteRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteRequest setUserIp(java.lang.String userIp) {
        return (DeleteRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public DeleteRequest setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public DeleteRequest setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long sender;

      /**

       */
      public java.lang.Long getSender() {
        return sender;
      }

      public DeleteRequest setSender(java.lang.Long sender) {
        this.sender = sender;
        return this;
      }

      @Override
      public DeleteRequest set(String parameterName, Object value) {
        return (DeleteRequest) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "request.getRequest".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetRequest#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param id
     * @param sender
     * @return the request
     */
    public GetRequest getRequest(java.lang.Long userId, java.lang.Long id, java.lang.Long sender) throws java.io.IOException {
      GetRequest result = new GetRequest(userId, id, sender);
      initialize(result);
      return result;
    }

    public class GetRequest extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainRequestInfoMessage> {

      private static final String REST_PATH = "users/{user_id}/requests/{id}";

      /**
       * Create a request for the method "request.getRequest".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetRequest#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetRequest#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param id
       * @param sender
       * @since 1.13
       */
      protected GetRequest(java.lang.Long userId, java.lang.Long id, java.lang.Long sender) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainRequestInfoMessage.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        this.sender = com.google.api.client.util.Preconditions.checkNotNull(sender, "Required parameter sender must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetRequest setAlt(java.lang.String alt) {
        return (GetRequest) super.setAlt(alt);
      }

      @Override
      public GetRequest setFields(java.lang.String fields) {
        return (GetRequest) super.setFields(fields);
      }

      @Override
      public GetRequest setKey(java.lang.String key) {
        return (GetRequest) super.setKey(key);
      }

      @Override
      public GetRequest setOauthToken(java.lang.String oauthToken) {
        return (GetRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public GetRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetRequest setQuotaUser(java.lang.String quotaUser) {
        return (GetRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetRequest setUserIp(java.lang.String userIp) {
        return (GetRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_id")
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetRequest setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetRequest setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long sender;

      /**

       */
      public java.lang.Long getSender() {
        return sender;
      }

      public GetRequest setSender(java.lang.Long sender) {
        this.sender = sender;
        return this;
      }

      @Override
      public GetRequest set(String parameterName, Object value) {
        return (GetRequest) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "request.sendRequest".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link SendRequest#execute()} method to invoke the remote
     * operation.
     *
     * @param receiver
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainRequestSendMessage}
     * @return the request
     */
    public SendRequest sendRequest(java.lang.Long receiver, com.appspot.recipex_1281.recipexServerApi.model.MainRequestSendMessage content) throws java.io.IOException {
      SendRequest result = new SendRequest(receiver, content);
      initialize(result);
      return result;
    }

    public class SendRequest extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{receiver}/requests";

      /**
       * Create a request for the method "request.sendRequest".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link SendRequest#execute()} method to invoke the remote
       * operation. <p> {@link
       * SendRequest#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param receiver
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainRequestSendMessage}
       * @since 1.13
       */
      protected SendRequest(java.lang.Long receiver, com.appspot.recipex_1281.recipexServerApi.model.MainRequestSendMessage content) {
        super(RecipexServerApi.this, "POST", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.receiver = com.google.api.client.util.Preconditions.checkNotNull(receiver, "Required parameter receiver must be specified.");
      }

      @Override
      public SendRequest setAlt(java.lang.String alt) {
        return (SendRequest) super.setAlt(alt);
      }

      @Override
      public SendRequest setFields(java.lang.String fields) {
        return (SendRequest) super.setFields(fields);
      }

      @Override
      public SendRequest setKey(java.lang.String key) {
        return (SendRequest) super.setKey(key);
      }

      @Override
      public SendRequest setOauthToken(java.lang.String oauthToken) {
        return (SendRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public SendRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendRequest setQuotaUser(java.lang.String quotaUser) {
        return (SendRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendRequest setUserIp(java.lang.String userIp) {
        return (SendRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long receiver;

      /**

       */
      public java.lang.Long getReceiver() {
        return receiver;
      }

      public SendRequest setReceiver(java.lang.Long receiver) {
        this.receiver = receiver;
        return this;
      }

      @Override
      public SendRequest set(String parameterName, Object value) {
        return (SendRequest) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the User collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code RecipexServerApi recipexServerApi = new RecipexServerApi(...);}
   *   {@code RecipexServerApi.User.List request = recipexServerApi.user().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public User user() {
    return new User();
  }

  /**
   * The "user" collection of methods.
   */
  public class User {

    /**
     * Create a request for the method "user.deleteUser".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link DeleteUser#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public DeleteUser deleteUser(java.lang.Long id) throws java.io.IOException {
      DeleteUser result = new DeleteUser(id);
      initialize(result);
      return result;
    }

    public class DeleteUser extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{id}";

      /**
       * Create a request for the method "user.deleteUser".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link DeleteUser#execute()} method to invoke the remote
       * operation. <p> {@link
       * DeleteUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected DeleteUser(java.lang.Long id) {
        super(RecipexServerApi.this, "DELETE", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public DeleteUser setAlt(java.lang.String alt) {
        return (DeleteUser) super.setAlt(alt);
      }

      @Override
      public DeleteUser setFields(java.lang.String fields) {
        return (DeleteUser) super.setFields(fields);
      }

      @Override
      public DeleteUser setKey(java.lang.String key) {
        return (DeleteUser) super.setKey(key);
      }

      @Override
      public DeleteUser setOauthToken(java.lang.String oauthToken) {
        return (DeleteUser) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteUser setQuotaUser(java.lang.String quotaUser) {
        return (DeleteUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteUser setUserIp(java.lang.String userIp) {
        return (DeleteUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public DeleteUser setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public DeleteUser setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public DeleteUser set(String parameterName, Object value) {
        return (DeleteUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getMeasurements".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetMeasurements#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public GetMeasurements getMeasurements(java.lang.Long id) throws java.io.IOException {
      GetMeasurements result = new GetMeasurements(id);
      initialize(result);
      return result;
    }

    public class GetMeasurements extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserMeasurementsMessage> {

      private static final String REST_PATH = "users/{id}/measurements";

      /**
       * Create a request for the method "user.getMeasurements".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetMeasurements#execute()} method to invoke the remote
       * operation. <p> {@link GetMeasurements#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetMeasurements(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserMeasurementsMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetMeasurements setAlt(java.lang.String alt) {
        return (GetMeasurements) super.setAlt(alt);
      }

      @Override
      public GetMeasurements setFields(java.lang.String fields) {
        return (GetMeasurements) super.setFields(fields);
      }

      @Override
      public GetMeasurements setKey(java.lang.String key) {
        return (GetMeasurements) super.setKey(key);
      }

      @Override
      public GetMeasurements setOauthToken(java.lang.String oauthToken) {
        return (GetMeasurements) super.setOauthToken(oauthToken);
      }

      @Override
      public GetMeasurements setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetMeasurements) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetMeasurements setQuotaUser(java.lang.String quotaUser) {
        return (GetMeasurements) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetMeasurements setUserIp(java.lang.String userIp) {
        return (GetMeasurements) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetMeasurements setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetMeasurements setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetMeasurements set(String parameterName, Object value) {
        return (GetMeasurements) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getMessages".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetMessages#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public GetMessages getMessages(java.lang.Long id) throws java.io.IOException {
      GetMessages result = new GetMessages(id);
      initialize(result);
      return result;
    }

    public class GetMessages extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserMessagesMessage> {

      private static final String REST_PATH = "users/{id}/messages";

      /**
       * Create a request for the method "user.getMessages".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetMessages#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetMessages#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetMessages(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserMessagesMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetMessages setAlt(java.lang.String alt) {
        return (GetMessages) super.setAlt(alt);
      }

      @Override
      public GetMessages setFields(java.lang.String fields) {
        return (GetMessages) super.setFields(fields);
      }

      @Override
      public GetMessages setKey(java.lang.String key) {
        return (GetMessages) super.setKey(key);
      }

      @Override
      public GetMessages setOauthToken(java.lang.String oauthToken) {
        return (GetMessages) super.setOauthToken(oauthToken);
      }

      @Override
      public GetMessages setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetMessages) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetMessages setQuotaUser(java.lang.String quotaUser) {
        return (GetMessages) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetMessages setUserIp(java.lang.String userIp) {
        return (GetMessages) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetMessages setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetMessages setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetMessages set(String parameterName, Object value) {
        return (GetMessages) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getRequests".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetRequests#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public GetRequests getRequests(java.lang.Long id) throws java.io.IOException {
      GetRequests result = new GetRequests(id);
      initialize(result);
      return result;
    }

    public class GetRequests extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserRequestsMessage> {

      private static final String REST_PATH = "users/{id}/requests";

      /**
       * Create a request for the method "user.getRequests".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetRequests#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetRequests#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetRequests(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserRequestsMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetRequests setAlt(java.lang.String alt) {
        return (GetRequests) super.setAlt(alt);
      }

      @Override
      public GetRequests setFields(java.lang.String fields) {
        return (GetRequests) super.setFields(fields);
      }

      @Override
      public GetRequests setKey(java.lang.String key) {
        return (GetRequests) super.setKey(key);
      }

      @Override
      public GetRequests setOauthToken(java.lang.String oauthToken) {
        return (GetRequests) super.setOauthToken(oauthToken);
      }

      @Override
      public GetRequests setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetRequests) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetRequests setQuotaUser(java.lang.String quotaUser) {
        return (GetRequests) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetRequests setUserIp(java.lang.String userIp) {
        return (GetRequests) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetRequests setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetRequests setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetRequests set(String parameterName, Object value) {
        return (GetRequests) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getRequestsPending".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetRequestsPending#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public GetRequestsPending getRequestsPending(java.lang.Long id) throws java.io.IOException {
      GetRequestsPending result = new GetRequestsPending(id);
      initialize(result);
      return result;
    }

    public class GetRequestsPending extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserRequestsMessage> {

      private static final String REST_PATH = "users/{id}/requests-pending";

      /**
       * Create a request for the method "user.getRequestsPending".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetRequestsPending#execute()} method to invoke the remote
       * operation. <p> {@link GetRequestsPending#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetRequestsPending(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserRequestsMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetRequestsPending setAlt(java.lang.String alt) {
        return (GetRequestsPending) super.setAlt(alt);
      }

      @Override
      public GetRequestsPending setFields(java.lang.String fields) {
        return (GetRequestsPending) super.setFields(fields);
      }

      @Override
      public GetRequestsPending setKey(java.lang.String key) {
        return (GetRequestsPending) super.setKey(key);
      }

      @Override
      public GetRequestsPending setOauthToken(java.lang.String oauthToken) {
        return (GetRequestsPending) super.setOauthToken(oauthToken);
      }

      @Override
      public GetRequestsPending setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetRequestsPending) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetRequestsPending setQuotaUser(java.lang.String quotaUser) {
        return (GetRequestsPending) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetRequestsPending setUserIp(java.lang.String userIp) {
        return (GetRequestsPending) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetRequestsPending setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetRequestsPending setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetRequestsPending set(String parameterName, Object value) {
        return (GetRequestsPending) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getUnreadMessages".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetUnreadMessages#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public GetUnreadMessages getUnreadMessages(java.lang.Long id) throws java.io.IOException {
      GetUnreadMessages result = new GetUnreadMessages(id);
      initialize(result);
      return result;
    }

    public class GetUnreadMessages extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserMessagesMessage> {

      private static final String REST_PATH = "users/{id}/unread-messages";

      /**
       * Create a request for the method "user.getUnreadMessages".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetUnreadMessages#execute()} method to invoke the remote
       * operation. <p> {@link GetUnreadMessages#initialize(com.google.api.client.googleapis.services.Ab
       * stractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetUnreadMessages(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserMessagesMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUnreadMessages setAlt(java.lang.String alt) {
        return (GetUnreadMessages) super.setAlt(alt);
      }

      @Override
      public GetUnreadMessages setFields(java.lang.String fields) {
        return (GetUnreadMessages) super.setFields(fields);
      }

      @Override
      public GetUnreadMessages setKey(java.lang.String key) {
        return (GetUnreadMessages) super.setKey(key);
      }

      @Override
      public GetUnreadMessages setOauthToken(java.lang.String oauthToken) {
        return (GetUnreadMessages) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUnreadMessages setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUnreadMessages) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUnreadMessages setQuotaUser(java.lang.String quotaUser) {
        return (GetUnreadMessages) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUnreadMessages setUserIp(java.lang.String userIp) {
        return (GetUnreadMessages) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetUnreadMessages setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetUnreadMessages setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetUnreadMessages set(String parameterName, Object value) {
        return (GetUnreadMessages) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.getUser".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public GetUser getUser(java.lang.Long id) throws java.io.IOException {
      GetUser result = new GetUser(id);
      initialize(result);
      return result;
    }

    public class GetUser extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainUserInfoMessage> {

      private static final String REST_PATH = "users/{id}";

      /**
       * Create a request for the method "user.getUser".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
       * <p> {@link
       * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetUser(java.lang.Long id) {
        super(RecipexServerApi.this, "GET", REST_PATH, null, com.appspot.recipex_1281.recipexServerApi.model.MainUserInfoMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUser setAlt(java.lang.String alt) {
        return (GetUser) super.setAlt(alt);
      }

      @Override
      public GetUser setFields(java.lang.String fields) {
        return (GetUser) super.setFields(fields);
      }

      @Override
      public GetUser setKey(java.lang.String key) {
        return (GetUser) super.setKey(key);
      }

      @Override
      public GetUser setOauthToken(java.lang.String oauthToken) {
        return (GetUser) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUser setQuotaUser(java.lang.String quotaUser) {
        return (GetUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUser setUserIp(java.lang.String userIp) {
        return (GetUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public GetUser setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String kind;

      /**

       */
      public java.lang.String getKind() {
        return kind;
      }

      public GetUser setKind(java.lang.String kind) {
        this.kind = kind;
        return this;
      }

      @Override
      public GetUser set(String parameterName, Object value) {
        return (GetUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.registerUser".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link RegisterUser#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainRegisterUserMessage}
     * @return the request
     */
    public RegisterUser registerUser(com.appspot.recipex_1281.recipexServerApi.model.MainRegisterUserMessage content) throws java.io.IOException {
      RegisterUser result = new RegisterUser(content);
      initialize(result);
      return result;
    }

    public class RegisterUser extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users";

      /**
       * Create a request for the method "user.registerUser".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link RegisterUser#execute()} method to invoke the remote
       * operation. <p> {@link
       * RegisterUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainRegisterUserMessage}
       * @since 1.13
       */
      protected RegisterUser(com.appspot.recipex_1281.recipexServerApi.model.MainRegisterUserMessage content) {
        super(RecipexServerApi.this, "POST", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
      }

      @Override
      public RegisterUser setAlt(java.lang.String alt) {
        return (RegisterUser) super.setAlt(alt);
      }

      @Override
      public RegisterUser setFields(java.lang.String fields) {
        return (RegisterUser) super.setFields(fields);
      }

      @Override
      public RegisterUser setKey(java.lang.String key) {
        return (RegisterUser) super.setKey(key);
      }

      @Override
      public RegisterUser setOauthToken(java.lang.String oauthToken) {
        return (RegisterUser) super.setOauthToken(oauthToken);
      }

      @Override
      public RegisterUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RegisterUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RegisterUser setQuotaUser(java.lang.String quotaUser) {
        return (RegisterUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public RegisterUser setUserIp(java.lang.String userIp) {
        return (RegisterUser) super.setUserIp(userIp);
      }

      @Override
      public RegisterUser set(String parameterName, Object value) {
        return (RegisterUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.updateUser".
     *
     * This request holds the parameters needed by the recipexServerApi server.  After setting any
     * optional parameters, call the {@link UpdateUser#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainUpdateUserMessage}
     * @return the request
     */
    public UpdateUser updateUser(java.lang.Long id, com.appspot.recipex_1281.recipexServerApi.model.MainUpdateUserMessage content) throws java.io.IOException {
      UpdateUser result = new UpdateUser(id, content);
      initialize(result);
      return result;
    }

    public class UpdateUser extends RecipexServerApiRequest<com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "users/{id}";

      /**
       * Create a request for the method "user.updateUser".
       *
       * This request holds the parameters needed by the the recipexServerApi server.  After setting any
       * optional parameters, call the {@link UpdateUser#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdateUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link com.appspot.recipex_1281.recipexServerApi.model.MainUpdateUserMessage}
       * @since 1.13
       */
      protected UpdateUser(java.lang.Long id, com.appspot.recipex_1281.recipexServerApi.model.MainUpdateUserMessage content) {
        super(RecipexServerApi.this, "PUT", REST_PATH, content, com.appspot.recipex_1281.recipexServerApi.model.MainDefaultResponseMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public UpdateUser setAlt(java.lang.String alt) {
        return (UpdateUser) super.setAlt(alt);
      }

      @Override
      public UpdateUser setFields(java.lang.String fields) {
        return (UpdateUser) super.setFields(fields);
      }

      @Override
      public UpdateUser setKey(java.lang.String key) {
        return (UpdateUser) super.setKey(key);
      }

      @Override
      public UpdateUser setOauthToken(java.lang.String oauthToken) {
        return (UpdateUser) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateUser setQuotaUser(java.lang.String quotaUser) {
        return (UpdateUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateUser setUserIp(java.lang.String userIp) {
        return (UpdateUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public UpdateUser setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public UpdateUser set(String parameterName, Object value) {
        return (UpdateUser) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link RecipexServerApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link RecipexServerApi}. */
    @Override
    public RecipexServerApi build() {
      return new RecipexServerApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link RecipexServerApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setRecipexServerApiRequestInitializer(
        RecipexServerApiRequestInitializer recipexserverapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(recipexserverapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
