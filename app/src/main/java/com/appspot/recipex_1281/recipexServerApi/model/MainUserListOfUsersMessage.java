/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-05-27 16:00:31 UTC)
 * on 2016-07-06 at 19:30:55 UTC 
 * Modify at your own risk.
 */

package com.appspot.recipex_1281.recipexServerApi.model;

/**
 * Message to return a list of Users Summary: This message class is intended to be a wrapper for a
 * response message which returns as additional payload a list of UserMainInfoMessage. Attributes:
 * users = A list of UserMainInfoMessage to be returned response = A DefaultResponseMessage
 * containing the response
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the recipexServerApi. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MainUserListOfUsersMessage extends com.google.api.client.json.GenericJson {

  /**
   * A generic response message Summary: This message class is intended for returning a generic
   * response. Attributes: code = HTTP code of the response [REQUIRED] message = Text message of the
   * response [REQUIRED] doOperation = Boolean value to determine if there's an operation to do
   * according to the response payload = Optional textual payload of the response user =
   * RegisterUserMessage of a related invocation
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MainDefaultResponseMessage response;

  /**
   * Message to return User's main informations Summary: This message class is intended to return
   * the most important informations of a specific User entity. Attributes: id = Datastore id of the
   * User entity caregiver_id = Datastore id of the corresponding Caregiver entity [IF PRESENT] name
   * = Name of the User entity surname = Surname of the User entity email = Email of the User entity
   * pic = Profile pic of the User entity field = Field of specialization of the Caregiver entity
   * [IF PRESENT] calendarid = Google Calendar id of the User's calendar
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MainUserMainInfoMessage> users;

  static {
    // hack to force ProGuard to consider MainUserMainInfoMessage used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(MainUserMainInfoMessage.class);
  }

  /**
   * A generic response message Summary: This message class is intended for returning a generic
   * response. Attributes: code = HTTP code of the response [REQUIRED] message = Text message of the
   * response [REQUIRED] doOperation = Boolean value to determine if there's an operation to do
   * according to the response payload = Optional textual payload of the response user =
   * RegisterUserMessage of a related invocation
   * @return value or {@code null} for none
   */
  public MainDefaultResponseMessage getResponse() {
    return response;
  }

  /**
   * A generic response message Summary: This message class is intended for returning a generic
   * response. Attributes: code = HTTP code of the response [REQUIRED] message = Text message of the
   * response [REQUIRED] doOperation = Boolean value to determine if there's an operation to do
   * according to the response payload = Optional textual payload of the response user =
   * RegisterUserMessage of a related invocation
   * @param response response or {@code null} for none
   */
  public MainUserListOfUsersMessage setResponse(MainDefaultResponseMessage response) {
    this.response = response;
    return this;
  }

  /**
   * Message to return User's main informations Summary: This message class is intended to return
   * the most important informations of a specific User entity. Attributes: id = Datastore id of the
   * User entity caregiver_id = Datastore id of the corresponding Caregiver entity [IF PRESENT] name
   * = Name of the User entity surname = Surname of the User entity email = Email of the User entity
   * pic = Profile pic of the User entity field = Field of specialization of the Caregiver entity
   * [IF PRESENT] calendarid = Google Calendar id of the User's calendar
   * @return value or {@code null} for none
   */
  public java.util.List<MainUserMainInfoMessage> getUsers() {
    return users;
  }

  /**
   * Message to return User's main informations Summary: This message class is intended to return
   * the most important informations of a specific User entity. Attributes: id = Datastore id of the
   * User entity caregiver_id = Datastore id of the corresponding Caregiver entity [IF PRESENT] name
   * = Name of the User entity surname = Surname of the User entity email = Email of the User entity
   * pic = Profile pic of the User entity field = Field of specialization of the Caregiver entity
   * [IF PRESENT] calendarid = Google Calendar id of the User's calendar
   * @param users users or {@code null} for none
   */
  public MainUserListOfUsersMessage setUsers(java.util.List<MainUserMainInfoMessage> users) {
    this.users = users;
    return this;
  }

  @Override
  public MainUserListOfUsersMessage set(String fieldName, Object value) {
    return (MainUserListOfUsersMessage) super.set(fieldName, value);
  }

  @Override
  public MainUserListOfUsersMessage clone() {
    return (MainUserListOfUsersMessage) super.clone();
  }

}
